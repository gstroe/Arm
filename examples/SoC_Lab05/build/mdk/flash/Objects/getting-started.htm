<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\flash\Objects\getting-started.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\flash\Objects\getting-started.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Mon Feb 01 01:33:49 2016
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
PIOA_Handler &rArr; PioInterruptHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7a]">PMC_EnablePeripheral</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a]">__aeabi_assert</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ACC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[42]">AES_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[29]">AFEC0_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[34]">AFEC1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[7]">BusFault_Handler</a> from exceptions.o(i.BusFault_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[2a]">DACC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[13]">EFC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[33]">GMAC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[1e]">HSMCI_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[5]">HardFault_Handler</a> from exceptions.o(i.HardFault_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[2c]">ICM_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[45]">ISI_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[2f]">MCAN0_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[30]">MCAN0_Line1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[31]">MCAN1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[32]">MCAN1_Line1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[41]">MLB_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[6]">MemManage_Handler</a> from exceptions.o(i.MemManage_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[4]">NMI_Handler</a> from exceptions.o(i.NMI_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[16]">PIOA_Handler</a> from pio_it.o(i.PIOA_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[17]">PIOB_Handler</a> from pio_it.o(i.PIOB_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[18]">PIOC_Handler</a> from pio_it.o(i.PIOC_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[1c]">PIOD_Handler</a> from pio_it.o(i.PIOD_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[1d]">PIOE_Handler</a> from pio_it.o(i.PIOE_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[12]">PMC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[2b]">PWM0_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[46]">PWM1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[37]">QSPI_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[e]">RSTC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[48]">RSWDT_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[f]">RTC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[10]">RTT_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[3]">Reset_Handler</a> from startup_sam.o(i.Reset_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[47]">SDRAMC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[21]">SPI0_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[36]">SPI1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[22]">SSC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[d]">SUPC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[9]">SVC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[c]">SysTick_Handler</a> from timetick.o(i.SysTick_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[23]">TC0_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[3f]">TC10_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[40]">TC11_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[24]">TC1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[25]">TC2_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[26]">TC3_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[27]">TC4_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[28]">TC5_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[3b]">TC6_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[3c]">TC7_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[3d]">TC8_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[3e]">TC9_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[43]">TRNG_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[1f]">TWIHS0_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[20]">TWIHS1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[35]">TWIHS2_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[14]">UART0_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[15]">UART1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[38]">UART2_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[39]">UART3_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[3a]">UART4_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[19]">USART0_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[1a]">USART1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[1b]">USART2_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[2e]">USBHS_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[8]">UsageFault_Handler</a> from exceptions.o(i.UsageFault_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[11]">WDT_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[44]">XDMAC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[4a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[49]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[4c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[97]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[98]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4f]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[99]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[50]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[69]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[52]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[54]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[56]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[9a]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[59]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[af]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[5e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b0]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[b1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[b2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[b4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[b6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[4d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[b7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b8]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[58]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[b9]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; _DBGU_Handler &rArr; trng_test &rArr; PMC_DisablePeripheral &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ba]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[73]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[bb]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[bc]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_test
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;struct_test
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chip_id
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_test
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_screen
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_test
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DBGU_Handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dummy_Handler
</UL>

<P><STRONG><a name="[64]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[65]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[63]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[51]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[53]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[be]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_EnablePeripheral
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_DisablePeripheral
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInterruptHandler
</UL>

<P><STRONG><a name="[bf]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Configure
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[6d]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[55]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[57]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[62]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[6c]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[6e]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[70]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[5c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[72]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[71]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[74]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, exceptions.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = BusFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackUnwind
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[77]"></a>DBG_Configure</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, dbg_console.o(i.DBG_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_EnablePeripheral
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_IsRxReady
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_GetChar
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_PutChar
</UL>

<P><STRONG><a name="[7b]"></a>DBG_GetChar</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dbg_console.o(i.DBG_GetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DBG_GetChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DBGU_Handler
</UL>

<P><STRONG><a name="[7c]"></a>DBG_IsRxReady</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dbg_console.o(i.DBG_IsRxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DBG_IsRxReady &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DBGU_Handler
</UL>

<P><STRONG><a name="[7d]"></a>DBG_PutChar</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dbg_console.o(i.DBG_PutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>

<P><STRONG><a name="[2d]"></a>ACC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[42]"></a>AES_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[29]"></a>AFEC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[34]"></a>AFEC1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[c3]"></a>CCF_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler), UNUSED)

<P><STRONG><a name="[c4]"></a>CCW_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler), UNUSED)

<P><STRONG><a name="[2a]"></a>DACC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[7e]"></a>Dummy_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[13]"></a>EFC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[c5]"></a>FPU_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler), UNUSED)

<P><STRONG><a name="[c6]"></a>GMACQ1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler), UNUSED)

<P><STRONG><a name="[c7]"></a>GMACQ2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler), UNUSED)

<P><STRONG><a name="[33]"></a>GMAC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[1e]"></a>HSMCI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[2c]"></a>ICM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[45]"></a>ISI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[2f]"></a>MCAN0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[30]"></a>MCAN0_Line1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[31]"></a>MCAN1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[32]"></a>MCAN1_Line1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[41]"></a>MLB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[12]"></a>PMC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[2b]"></a>PWM0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[46]"></a>PWM1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[37]"></a>QSPI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[e]"></a>RSTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[48]"></a>RSWDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[f]"></a>RTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[10]"></a>RTT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[47]"></a>SDRAMC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[21]"></a>SPI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[22]"></a>SSC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[d]"></a>SUPC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[23]"></a>TC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[3f]"></a>TC10_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[40]"></a>TC11_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[24]"></a>TC1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[25]"></a>TC2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[26]"></a>TC3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[27]"></a>TC4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[28]"></a>TC5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[3b]"></a>TC6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[3c]"></a>TC7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[3d]"></a>TC8_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[3e]"></a>TC9_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[43]"></a>TRNG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[1f]"></a>TWIHS0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[20]"></a>TWIHS1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[35]"></a>TWIHS2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[14]"></a>UART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[15]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[38]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[39]"></a>UART3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[3a]"></a>UART4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[19]"></a>USART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[1a]"></a>USART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[1b]"></a>USART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[2e]"></a>USBHS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[11]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[44]"></a>XDMAC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, exceptions.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackUnwind
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_reason
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[80]"></a>LowLevelInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_lowlevel.o(i.LowLevelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LowLevelInit &rArr; _SetupMemoryRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetupMemoryRegion
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[92]"></a>MPU_CalMPURegionSize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mpu.o(i.MPU_CalMPURegionSize))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetupMemoryRegion
</UL>

<P><STRONG><a name="[94]"></a>MPU_Enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mpu.o(i.MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetupMemoryRegion
</UL>

<P><STRONG><a name="[93]"></a>MPU_SetRegion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mpu.o(i.MPU_SetRegion))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetupMemoryRegion
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, exceptions.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MemManage_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackUnwind
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = NMI_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[16]"></a>PIOA_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pio_it.o(i.PIOA_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = PIOA_Handler &rArr; PioInterruptHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[17]"></a>PIOB_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pio_it.o(i.PIOB_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = PIOB_Handler &rArr; PioInterruptHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[18]"></a>PIOC_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pio_it.o(i.PIOC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = PIOC_Handler &rArr; PioInterruptHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[1c]"></a>PIOD_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pio_it.o(i.PIOD_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = PIOD_Handler &rArr; PioInterruptHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[1d]"></a>PIOE_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pio_it.o(i.PIOE_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = PIOE_Handler &rArr; PioInterruptHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[79]"></a>PIO_Configure</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, pio.o(i.PIO_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_EnablePeripheral
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralD
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralC
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralB
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralA
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetOutput
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetInput
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Configure
</UL>

<P><STRONG><a name="[8a]"></a>PMC_DisablePeripheral</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, pmc.o(i.PMC_DisablePeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = PMC_DisablePeripheral &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_test
</UL>

<P><STRONG><a name="[7a]"></a>PMC_EnablePeripheral</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, pmc.o(i.PMC_EnablePeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = PMC_EnablePeripheral &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_test
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Configure
</UL>

<P><STRONG><a name="[83]"></a>PioInterruptHandler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, pio_it.o(i.PioInterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = PioInterruptHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOE_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOD_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOC_Handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOB_Handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOA_Handler
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, startup_sam.o(i.Reset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Reset_Handler &rArr; LowLevelInit &rArr; _SetupMemoryRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowLevelInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, timetick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[81]"></a>SystemInit</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, system_samv71.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowLevelInit
</UL>

<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, exceptions.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = UsageFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackUnwind
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[95]"></a>WDT_Disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdt.o(i.WDT_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>_SetupMemoryRegion</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, board_lowlevel.o(i._SetupMemoryRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SetupMemoryRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_SetRegion
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Enable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_CalMPURegionSize
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowLevelInit
</UL>

<P><STRONG><a name="[6b]"></a>__assert_puts</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(i.__assert_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[68]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[60]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[75]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(i._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _ttywrch &rArr; DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[8e]"></a>array_test</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(i.array_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = array_test &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DBGU_Handler
</UL>

<P><STRONG><a name="[6f]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[49]"></a>fputc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = fputc &rArr; DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = main &rArr; _DBGU_Handler &rArr; trng_test &rArr; PMC_DisablePeripheral &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Disable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_screen
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DBGU_Handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[91]"></a>main_screen</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(i.main_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = main_screen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DBGU_Handler
</UL>

<P><STRONG><a name="[8d]"></a>pointer_test</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i.pointer_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = pointer_test &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DBGU_Handler
</UL>

<P><STRONG><a name="[8f]"></a>read_chip_id</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, main.o(i.read_chip_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = read_chip_id &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DBGU_Handler
</UL>

<P><STRONG><a name="[8c]"></a>struct_test</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i.struct_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = struct_test &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DBGU_Handler
</UL>

<P><STRONG><a name="[90]"></a>trng_test</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.trng_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = trng_test &rArr; PMC_DisablePeripheral &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_EnablePeripheral
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_DisablePeripheral
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DBGU_Handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[96]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, main.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>_DBGU_Handler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, main.o(i._DBGU_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _DBGU_Handler &rArr; trng_test &rArr; PMC_DisablePeripheral &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_IsRxReady
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_GetChar
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_test
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;struct_test
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chip_id
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_test
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_screen
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_test
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>HardFault_reason</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, exceptions.o(i.HardFault_reason))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[76]"></a>StackUnwind</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exceptions.o(i.StackUnwind))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[88]"></a>PIO_SetInput</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, pio.o(i.PIO_SetInput))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[89]"></a>PIO_SetOutput</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pio.o(i.PIO_SetOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIO_SetOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[84]"></a>PIO_SetPeripheralA</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, pio.o(i.PIO_SetPeripheralA))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIO_SetPeripheralA
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[85]"></a>PIO_SetPeripheralB</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, pio.o(i.PIO_SetPeripheralB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIO_SetPeripheralB
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[86]"></a>PIO_SetPeripheralC</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, pio.o(i.PIO_SetPeripheralC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIO_SetPeripheralC
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[87]"></a>PIO_SetPeripheralD</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, pio.o(i.PIO_SetPeripheralD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIO_SetPeripheralD
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[4a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
