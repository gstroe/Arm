<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\flash\Objects\gmac_uip_webserver.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\flash\Objects\gmac_uip_webserver.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue May 03 12:58:05 2016
<BR><P>
<H3>Maximum Stack Usage =        400 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; gmac_tapdev_init &rArr; GMACB_AutoNegotiate &rArr; GMACB_DumpRegisters &rArr; GMACB_ReadPhy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8d]">PMC_EnablePeripheral</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[77]">__aeabi_assert</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ACC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[42]">AES_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[29]">AFEC0_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[34]">AFEC1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[7]">BusFault_Handler</a> from exceptions.o(i.BusFault_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[2a]">DACC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[13]">EFC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[33]">GMAC_Handler</a> from gmac_tapdev.o(i.GMAC_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[4e]">Get_SW0</a> from main.o(i.Get_SW0) referenced from main.o(i.main)
 <LI><a href="#[1e]">HSMCI_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[5]">HardFault_Handler</a> from exceptions.o(i.HardFault_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[2c]">ICM_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[45]">ISI_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[2f]">MCAN0_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[30]">MCAN0_Line1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[31]">MCAN1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[32]">MCAN1_Line1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[41]">MLB_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[6]">MemManage_Handler</a> from exceptions.o(i.MemManage_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[4]">NMI_Handler</a> from exceptions.o(i.NMI_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[16]">PIOA_Handler</a> from pio_it.o(i.PIOA_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[17]">PIOB_Handler</a> from pio_it.o(i.PIOB_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[18]">PIOC_Handler</a> from pio_it.o(i.PIOC_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[1c]">PIOD_Handler</a> from pio_it.o(i.PIOD_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[1d]">PIOE_Handler</a> from pio_it.o(i.PIOE_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[12]">PMC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[2b]">PWM0_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[46]">PWM1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[37]">QSPI_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[e]">RSTC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[48]">RSWDT_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[f]">RTC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[10]">RTT_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[3]">Reset_Handler</a> from startup_sam.o(i.Reset_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[47]">SDRAMC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[21]">SPI0_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[36]">SPI1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[22]">SSC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[d]">SUPC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[9]">SVC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[c]">SysTick_Handler</a> from timetick.o(i.SysTick_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[23]">TC0_Handler</a> from clock-arch.o(i.TC0_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[3f]">TC10_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[40]">TC11_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[24]">TC1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[25]">TC2_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[26]">TC3_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[27]">TC4_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[28]">TC5_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[3b]">TC6_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[3c]">TC7_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[3d]">TC8_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[3e]">TC9_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[43]">TRNG_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[1f]">TWIHS0_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[20]">TWIHS1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[35]">TWIHS2_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[14]">UART0_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[15]">UART1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[38]">UART2_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[39]">UART3_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[3a]">UART4_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[19]">USART0_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[1a]">USART1_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[1b]">USART2_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[2e]">USBHS_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[8]">UsageFault_Handler</a> from exceptions.o(i.UsageFault_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[11]">WDT_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[44]">XDMAC_Handler</a> from startup_sam.o(i.Dummy_Handler) referenced from startup_sam.o(vectors)
 <LI><a href="#[4a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[49]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[52]">file_stats</a> from httpd-cgi.o(i.file_stats) referenced from httpd-cgi.o(.constdata)
 <LI><a href="#[4b]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[4c]">generate_file_stats</a> from httpd-cgi.o(i.generate_file_stats) referenced from httpd-cgi.o(i.file_stats)
 <LI><a href="#[4f]">generate_net_stats</a> from httpd-cgi.o(i.generate_net_stats) referenced from httpd-cgi.o(i.net_stats)
 <LI><a href="#[50]">generate_part_of_file</a> from httpd.o(i.generate_part_of_file) referenced from httpd.o(i.send_file)
 <LI><a href="#[51]">generate_tcp_stats</a> from httpd-cgi.o(i.generate_tcp_stats) referenced from httpd-cgi.o(i.tcp_stats)
 <LI><a href="#[54]">net_stats</a> from httpd-cgi.o(i.net_stats) referenced from httpd-cgi.o(.constdata)
 <LI><a href="#[4d]">nullfunction</a> from httpd-cgi.o(i.nullfunction) referenced from httpd-cgi.o(i.httpd_cgi)
 <LI><a href="#[53]">tcp_stats</a> from httpd-cgi.o(i.tcp_stats) referenced from httpd-cgi.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[55]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[56]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[58]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[130]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[131]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[132]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[133]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[134]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[59]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[76]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5b]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[5c]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[5e]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[60]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[135]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[63]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[136]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[137]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[138]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[139]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[140]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[141]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[142]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[143]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[144]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[145]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[146]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[147]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[148]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[149]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[68]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[14d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[14e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[14f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[150]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[151]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[57]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[152]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[153]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[62]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[154]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[64]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; gmac_tapdev_init &rArr; GMACB_AutoNegotiate &rArr; GMACB_DumpRegisters &rArr; GMACB_ReadPhy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[155]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[87]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[67]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[156]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[69]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[157]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tapdev_send
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tapdev_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTick_Configure
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWID_Read
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SW0
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_SetMdcClock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dummy_Handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_ResetPhy
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_InitPhy
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_DumpRegisters
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_AutoNegotiate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_WritePhy
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_ReadPhy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_FindValidPhy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_SendSG
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Poll
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Handler
</UL>

<P><STRONG><a name="[6d]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_tcp_stats
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_net_stats
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_file_stats
</UL>

<P><STRONG><a name="[71]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[72]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[70]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5a]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[5d]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[159]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWI_ConfigureMaster
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWID_Read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWID_Initialize
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_EnablePeripheral
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_EnableIt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_DisableIt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_ConfigureIt
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Configure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInterruptHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTicks
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDelayInTicks
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Start
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWI_Stop
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWI_StartRead
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWI_ReadByte
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWI_EnableIt
</UL>

<P><STRONG><a name="[15a]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_stats
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_scriptstate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_script
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_output
</UL>

<P><STRONG><a name="[109]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_output
</UL>

<P><STRONG><a name="[126]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_headers
</UL>

<P><STRONG><a name="[111]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_cgi
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_headers
</UL>

<P><STRONG><a name="[106]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_cgi
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_headers
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_output
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_part_of_file
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_SendSG
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Poll
</UL>

<P><STRONG><a name="[7a]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[15b]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FindMckDivisor
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Configure
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[7e]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[7d]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tapdev_init
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[80]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[73]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[6e]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[6f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[49]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[5f]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[61]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[6c]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[79]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[84]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[66]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[86]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[85]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[88]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, exceptions.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = BusFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackUnwind
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[8b]"></a>DBG_Configure</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, dbg_console.o(i.DBG_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_EnablePeripheral
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_PutChar
</UL>

<P><STRONG><a name="[8e]"></a>DBG_PutChar</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dbg_console.o(i.DBG_PutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>

<P><STRONG><a name="[2d]"></a>ACC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[42]"></a>AES_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[29]"></a>AFEC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[34]"></a>AFEC1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[161]"></a>CCF_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler), UNUSED)

<P><STRONG><a name="[162]"></a>CCW_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler), UNUSED)

<P><STRONG><a name="[2a]"></a>DACC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[8f]"></a>Dummy_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[13]"></a>EFC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[163]"></a>FPU_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler), UNUSED)

<P><STRONG><a name="[164]"></a>GMACQ1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler), UNUSED)

<P><STRONG><a name="[165]"></a>GMACQ2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler), UNUSED)

<P><STRONG><a name="[1e]"></a>HSMCI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[2c]"></a>ICM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[45]"></a>ISI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[2f]"></a>MCAN0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[30]"></a>MCAN0_Line1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[31]"></a>MCAN1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[32]"></a>MCAN1_Line1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[41]"></a>MLB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[12]"></a>PMC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[2b]"></a>PWM0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[46]"></a>PWM1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[37]"></a>QSPI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[e]"></a>RSTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[48]"></a>RSWDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[f]"></a>RTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[10]"></a>RTT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[47]"></a>SDRAMC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[21]"></a>SPI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[22]"></a>SSC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[d]"></a>SUPC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[3f]"></a>TC10_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[40]"></a>TC11_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[24]"></a>TC1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[25]"></a>TC2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[26]"></a>TC3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[27]"></a>TC4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[28]"></a>TC5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[3b]"></a>TC6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[3c]"></a>TC7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[3d]"></a>TC8_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[3e]"></a>TC9_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[43]"></a>TRNG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[1f]"></a>TWIHS0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[20]"></a>TWIHS1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[35]"></a>TWIHS2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[14]"></a>UART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[15]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[38]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[39]"></a>UART3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[3a]"></a>UART4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[19]"></a>USART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[1a]"></a>USART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[1b]"></a>USART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[2e]"></a>USBHS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[11]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[44]"></a>XDMAC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sam.o(i.Dummy_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[90]"></a>GMACB_AutoNegotiate</STRONG> (Thumb, 458 bytes, Stack size 56 bytes, gmacb_phy.o(i.GMACB_AutoNegotiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = GMACB_AutoNegotiate &rArr; GMACB_DumpRegisters &rArr; GMACB_ReadPhy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_EnableRGMII
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_EnableMdio
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_DisableMdio
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_DumpRegisters
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_WritePhy
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_ReadPhy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tapdev_init
</UL>

<P><STRONG><a name="[94]"></a>GMACB_DumpRegisters</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, gmacb_phy.o(i.GMACB_DumpRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GMACB_DumpRegisters &rArr; GMACB_ReadPhy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_EnableMdio
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_DisableMdio
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_ReadPhy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_AutoNegotiate
</UL>

<P><STRONG><a name="[100]"></a>GMACB_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gmacb_phy.o(i.GMACB_Init))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tapdev_init
</UL>

<P><STRONG><a name="[98]"></a>GMACB_InitPhy</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, gmacb_phy.o(i.GMACB_InitPhy))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GMACB_InitPhy &rArr; GMACB_ResetPhy &rArr; GMACB_WritePhy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Clear
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_SetMdcClock
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_ResetPhy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_FindValidPhy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tapdev_init
</UL>

<P><STRONG><a name="[9d]"></a>GMACB_ResetPhy</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, gmacb_phy.o(i.GMACB_ResetPhy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GMACB_ResetPhy &rArr; GMACB_WritePhy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_EnableMdio
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_DisableMdio
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_WritePhy
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_ReadPhy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_InitPhy
</UL>

<P><STRONG><a name="[a2]"></a>GMACD_Handler</STRONG> (Thumb, 592 bytes, Stack size 32 bytes, gmacd.o(i.GMACD_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GMACD_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_TxErrorHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_TxCompleteHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_GetTxPeerEvtFrameSec
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_GetTxPeerEvtFrameNsec
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_GetTxEvtFrameSec
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_GetTxEvtFrameNsec
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_GetRxStatus
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_GetItStatus
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_ClearRxStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_Handler
</UL>

<P><STRONG><a name="[ac]"></a>GMACD_Init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, gmacd.o(i.GMACD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GMACD_Init &rArr; PMC_EnablePeripheral &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_EnablePeripheral
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_NetworkControl
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_GetItStatus
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_DisableAllQueueIt
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_Configure
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_ClearTxStatus
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_ClearStatistics
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_ClearRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tapdev_init
</UL>

<P><STRONG><a name="[b2]"></a>GMACD_InitTransfer</STRONG> (Thumb, 502 bytes, Stack size 64 bytes, gmacd.o(i.GMACD_InitTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = GMACD_InitTransfer &rArr; GMACD_ResetTx &rArr; GMAC_SetTxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_ResetTx
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_ResetRx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_TransmitEnable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_StatisticsWriteEnable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_SetDMAConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_ReceiveEnable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_EnableIt
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tapdev_init
</UL>

<P><STRONG><a name="[ba]"></a>GMACD_Poll</STRONG> (Thumb, 762 bytes, Stack size 64 bytes, gmacd.o(i.GMACD_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GMACD_Poll &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_InvalidateDCache_by_Addr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tapdev_read
</UL>

<P><STRONG><a name="[bf]"></a>GMACD_Send</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, gmacd.o(i.GMACD_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GMACD_Send &rArr; GMACD_SendSG &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_SendSG
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tapdev_send
</UL>

<P><STRONG><a name="[c0]"></a>GMACD_SendSG</STRONG> (Thumb, 482 bytes, Stack size 64 bytes, gmacd.o(i.GMACD_SendSG))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GMACD_SendSG &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanDCache_by_Addr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_TransmissionStart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Send
</UL>

<P><STRONG><a name="[a4]"></a>GMAC_ClearRxStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gmac.o(i.GMAC_ClearRxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Handler
</UL>

<P><STRONG><a name="[af]"></a>GMAC_ClearStatistics</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gmac.o(i.GMAC_ClearStatistics))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Init
</UL>

<P><STRONG><a name="[b0]"></a>GMAC_ClearTxStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gmac.o(i.GMAC_ClearTxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_TxErrorHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_TxCompleteHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Init
</UL>

<P><STRONG><a name="[b1]"></a>GMAC_Configure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gmac.o(i.GMAC_Configure))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Init
</UL>

<P><STRONG><a name="[ae]"></a>GMAC_DisableAllQueueIt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gmac.o(i.GMAC_DisableAllQueueIt))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Init
</UL>

<P><STRONG><a name="[96]"></a>GMAC_DisableMdio</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gmac.o(i.GMAC_DisableMdio))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_ResetPhy
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_DumpRegisters
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_AutoNegotiate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_FindValidPhy
</UL>

<P><STRONG><a name="[b9]"></a>GMAC_EnableIt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gmac.o(i.GMAC_EnableIt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GMAC_EnableIt
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_InitTransfer
</UL>

<P><STRONG><a name="[91]"></a>GMAC_EnableMdio</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gmac.o(i.GMAC_EnableMdio))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_ResetPhy
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_DumpRegisters
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_AutoNegotiate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_FindValidPhy
</UL>

<P><STRONG><a name="[95]"></a>GMAC_EnableRGMII</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, gmac.o(i.GMAC_EnableRGMII))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_AutoNegotiate
</UL>

<P><STRONG><a name="[ab]"></a>GMAC_GetItStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gmac.o(i.GMAC_GetItStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Handler
</UL>

<P><STRONG><a name="[a3]"></a>GMAC_GetRxStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gmac.o(i.GMAC_GetRxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Handler
</UL>

<P><STRONG><a name="[a6]"></a>GMAC_GetTxEvtFrameNsec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gmac.o(i.GMAC_GetTxEvtFrameNsec))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Handler
</UL>

<P><STRONG><a name="[a7]"></a>GMAC_GetTxEvtFrameSec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gmac.o(i.GMAC_GetTxEvtFrameSec))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Handler
</UL>

<P><STRONG><a name="[a8]"></a>GMAC_GetTxPeerEvtFrameNsec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gmac.o(i.GMAC_GetTxPeerEvtFrameNsec))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Handler
</UL>

<P><STRONG><a name="[a9]"></a>GMAC_GetTxPeerEvtFrameSec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gmac.o(i.GMAC_GetTxPeerEvtFrameSec))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Handler
</UL>

<P><STRONG><a name="[c4]"></a>GMAC_GetTxStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gmac.o(i.GMAC_GetTxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_TxErrorHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_TxCompleteHandler
</UL>

<P><STRONG><a name="[33]"></a>GMAC_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gmac_tapdev.o(i.GMAC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GMAC_Handler &rArr; GMACD_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[a1]"></a>GMAC_IsIdle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gmac.o(i.GMAC_IsIdle))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_WaitPhy
</UL>

<P><STRONG><a name="[ad]"></a>GMAC_NetworkControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gmac.o(i.GMAC_NetworkControl))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Init
</UL>

<P><STRONG><a name="[a0]"></a>GMAC_PHYData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gmac.o(i.GMAC_PHYData))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_ReadPhy
</UL>

<P><STRONG><a name="[9e]"></a>GMAC_PHYMaintain</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gmac.o(i.GMAC_PHYMaintain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GMAC_PHYMaintain
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_WritePhy
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_ReadPhy
</UL>

<P><STRONG><a name="[b7]"></a>GMAC_ReceiveEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gmac.o(i.GMAC_ReceiveEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_ResetRx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_InitTransfer
</UL>

<P><STRONG><a name="[ff]"></a>GMAC_SetAddress</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gmac.o(i.GMAC_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GMAC_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tapdev_init
</UL>

<P><STRONG><a name="[b3]"></a>GMAC_SetDMAConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gmac.o(i.GMAC_SetDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GMAC_SetDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_InitTransfer
</UL>

<P><STRONG><a name="[9c]"></a>GMAC_SetMdcClock</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gmac.o(i.GMAC_SetMdcClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GMAC_SetMdcClock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_InitPhy
</UL>

<P><STRONG><a name="[bd]"></a>GMAC_SetRxQueue</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gmac.o(i.GMAC_SetRxQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GMAC_SetRxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_ResetRx
</UL>

<P><STRONG><a name="[be]"></a>GMAC_SetTxQueue</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gmac.o(i.GMAC_SetTxQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GMAC_SetTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_ResetTx
</UL>

<P><STRONG><a name="[b8]"></a>GMAC_StatisticsWriteEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gmac.o(i.GMAC_StatisticsWriteEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_InitTransfer
</UL>

<P><STRONG><a name="[c5]"></a>GMAC_TransmissionHalt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gmac.o(i.GMAC_TransmissionHalt))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_TxErrorHandler
</UL>

<P><STRONG><a name="[c3]"></a>GMAC_TransmissionStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gmac.o(i.GMAC_TransmissionStart))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_SendSG
</UL>

<P><STRONG><a name="[b6]"></a>GMAC_TransmitEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gmac.o(i.GMAC_TransmitEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_TxErrorHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_ResetTx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_InitTransfer
</UL>

<P><STRONG><a name="[c6]"></a>GetDelayInTicks</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timetick.o(i.GetDelayInTicks))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GetDelayInTicks &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWID_Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait
</UL>

<P><STRONG><a name="[c7]"></a>GetTicks</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timetick.o(i.GetTicks))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GetTicks &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWID_Read
</UL>

<P><STRONG><a name="[4e]"></a>Get_SW0</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.Get_SW0))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Get_SW0 &rArr; PIO_EnableIt &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Get
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_EnableIt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_DisableIt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, exceptions.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackUnwind
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_reason
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[cd]"></a>LED_Clear</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, led.o(i.LED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modData
</UL>

<P><STRONG><a name="[ce]"></a>LED_Configure</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led.o(i.LED_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LED_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>LED_Set</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, led.o(i.LED_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modData
</UL>

<P><STRONG><a name="[d0]"></a>LowLevelInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_lowlevel.o(i.LowLevelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LowLevelInit &rArr; _SetupMemoryRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetupMemoryRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[ed]"></a>MPU_CalMPURegionSize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mpu.o(i.MPU_CalMPURegionSize))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetupMemoryRegion
</UL>

<P><STRONG><a name="[ef]"></a>MPU_Enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mpu.o(i.MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetupMemoryRegion
</UL>

<P><STRONG><a name="[ee]"></a>MPU_SetRegion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mpu.o(i.MPU_SetRegion))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetupMemoryRegion
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, exceptions.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MemManage_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackUnwind
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = NMI_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[16]"></a>PIOA_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pio_it.o(i.PIOA_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = PIOA_Handler &rArr; PioInterruptHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[17]"></a>PIOB_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pio_it.o(i.PIOB_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = PIOB_Handler &rArr; PioInterruptHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[18]"></a>PIOC_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pio_it.o(i.PIOC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = PIOC_Handler &rArr; PioInterruptHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[1c]"></a>PIOD_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pio_it.o(i.PIOD_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = PIOD_Handler &rArr; PioInterruptHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[1d]"></a>PIOE_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pio_it.o(i.PIOE_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = PIOE_Handler &rArr; PioInterruptHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PioInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[99]"></a>PIO_Clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pio.o(i.PIO_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_InitPhy
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Clear
</UL>

<P><STRONG><a name="[8c]"></a>PIO_Configure</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, pio.o(i.PIO_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_EnablePeripheral
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralD
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralC
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralB
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralA
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetOutput
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetInput
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configure
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_InitPhy
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Configure
</UL>

<P><STRONG><a name="[da]"></a>PIO_ConfigureIt</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, pio_it.o(i.PIO_ConfigureIt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = PIO_ConfigureIt &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>PIO_DisableIt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pio_it.o(i.PIO_DisableIt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = PIO_DisableIt &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SW0
</UL>

<P><STRONG><a name="[cb]"></a>PIO_EnableIt</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pio_it.o(i.PIO_EnableIt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = PIO_EnableIt &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SW0
</UL>

<P><STRONG><a name="[ca]"></a>PIO_Get</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pio.o(i.PIO_Get))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SW0
</UL>

<P><STRONG><a name="[db]"></a>PIO_InitializeInterrupts</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, pio_it.o(i.PIO_InitializeInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIO_InitializeInterrupts &rArr; PMC_EnablePeripheral &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_EnablePeripheral
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>PIO_Set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pio.o(i.PIO_Set))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_InitPhy
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Clear
</UL>

<P><STRONG><a name="[115]"></a>PIO_SetDebounceFilter</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pio.o(i.PIO_SetDebounceFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIO_SetDebounceFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>PMC_EnablePeripheral</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, pmc.o(i.PMC_EnablePeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = PMC_EnablePeripheral &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_InitializeInterrupts
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Configure
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Init
</UL>

<P><STRONG><a name="[d3]"></a>PioInterruptHandler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, pio_it.o(i.PioInterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = PioInterruptHandler &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOE_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOD_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOC_Handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOB_Handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOA_Handler
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, startup_sam.o(i.Reset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Reset_Handler &rArr; LowLevelInit &rArr; _SetupMemoryRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowLevelInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, timetick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[d1]"></a>SystemInit</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, system_samv71.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowLevelInit
</UL>

<P><STRONG><a name="[23]"></a>TC0_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clock-arch.o(i.TC0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[e0]"></a>TC_Configure</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tc.o(i.TC_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = TC_Configure &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[e1]"></a>TC_FindMckDivisor</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, tc.o(i.TC_FindMckDivisor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TC_FindMckDivisor &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[e2]"></a>TC_Start</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tc.o(i.TC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TC_Start &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[e3]"></a>TWID_Initialize</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, twid.o(i.TWID_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TWID_Initialize &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>TWID_Read</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, twid.o(i.TWID_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = TWID_Read &rArr; TWI_StartRead &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTicks
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDelayInTicks
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWI_TransferComplete
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWI_Stop
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWI_StartRead
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWI_ReadByte
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWI_EnableIt
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWI_ByteReceived
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>TWI_ByteReceived</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, twi.o(i.TWI_ByteReceived))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWID_Read
</UL>

<P><STRONG><a name="[eb]"></a>TWI_ConfigureMaster</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, twi.o(i.TWI_ConfigureMaster))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = TWI_ConfigureMaster &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>TWI_EnableIt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, twi.o(i.TWI_EnableIt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TWI_EnableIt &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWID_Read
</UL>

<P><STRONG><a name="[e9]"></a>TWI_ReadByte</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, twi.o(i.TWI_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TWI_ReadByte &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWID_Read
</UL>

<P><STRONG><a name="[e6]"></a>TWI_StartRead</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, twi.o(i.TWI_StartRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = TWI_StartRead &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWID_Read
</UL>

<P><STRONG><a name="[e7]"></a>TWI_Stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, twi.o(i.TWI_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TWI_Stop &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWID_Read
</UL>

<P><STRONG><a name="[ea]"></a>TWI_TransferComplete</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, twi.o(i.TWI_TransferComplete))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWID_Read
</UL>

<P><STRONG><a name="[ec]"></a>TimeTick_Configure</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, timetick.o(i.TimeTick_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = TimeTick_Configure &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, exceptions.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = UsageFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackUnwind
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sam.o(vectors)
</UL>
<P><STRONG><a name="[114]"></a>WDT_Disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdt.o(i.WDT_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>Wait</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timetick.o(i.Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Wait &rArr; GetDelayInTicks &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDelayInTicks
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_InitPhy
</UL>

<P><STRONG><a name="[d2]"></a>_SetupMemoryRegion</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, board_lowlevel.o(i._SetupMemoryRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SetupMemoryRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_SetRegion
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Enable
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_CalMPURegionSize
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowLevelInit
</UL>

<P><STRONG><a name="[78]"></a>__assert_puts</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(i.__assert_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[75]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6a]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[89]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(i._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _ttywrch &rArr; DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[f2]"></a>clock_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, clock-arch.o(i.clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = clock_init &rArr; TC_Configure &rArr; __aeabi_assert &rArr; __assert_puts &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_EnablePeripheral
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Configure
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Start
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FindMckDivisor
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>clock_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock-arch.o(i.clock_time))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
</UL>

<P><STRONG><a name="[83]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[4b]"></a>fputc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = fputc &rArr; DBG_PutChar &rArr; DBG_Configure &rArr; PIO_Configure &rArr; PIO_SetPeripheralD
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[f7]"></a>get_data</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, httpd.o(i.get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_data &rArr; modData &rArr; LED_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modData
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readData
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_appcall
</UL>

<P><STRONG><a name="[fa]"></a>get_website</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, httpd.o(i.get_website))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_website &rArr; handle_connection &rArr; handle_output &rArr; handle_script &rArr; send_part_of_file &rArr; psock_send &rArr; send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_appcall
</UL>

<P><STRONG><a name="[fd]"></a>gmac_tapdev_init</STRONG> (Thumb, 322 bytes, Stack size 96 bytes, gmac_tapdev.o(i.gmac_tapdev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = gmac_tapdev_init &rArr; GMACB_AutoNegotiate &rArr; GMACB_DumpRegisters &rArr; GMACB_ReadPhy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_SetAddress
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_InitPhy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_AutoNegotiate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_InitTransfer
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>gmac_tapdev_read</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gmac_tapdev.o(i.gmac_tapdev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = gmac_tapdev_read &rArr; GMACD_Poll &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Poll
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>gmac_tapdev_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gmac_tapdev.o(i.gmac_tapdev_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = gmac_tapdev_send &rArr; GMACD_Send &rArr; GMACD_SendSG &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Send
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>gmac_tapdev_setmac</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gmac_tapdev.o(i.gmac_tapdev_setmac))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uip.o(i.htons))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_tcp_stats
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
</UL>

<P><STRONG><a name="[110]"></a>httpd_appcall</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, httpd.o(i.httpd_appcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = httpd_appcall &rArr; get_website &rArr; handle_connection &rArr; handle_output &rArr; handle_script &rArr; send_part_of_file &rArr; psock_send &rArr; send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_website
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[10d]"></a>httpd_cgi</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, httpd-cgi.o(i.httpd_cgi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = httpd_cgi &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_script
</UL>

<P><STRONG><a name="[f5]"></a>httpd_fs_count</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, httpd-fs.o(i.httpd_fs_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = httpd_fs_count &rArr; httpd_fs_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_fs_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_file_stats
</UL>

<P><STRONG><a name="[108]"></a>httpd_fs_open</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, httpd-fs.o(i.httpd_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = httpd_fs_open &rArr; httpd_fs_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_fs_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_script
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_output
</UL>

<P><STRONG><a name="[f1]"></a>httpd_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, httpd.o(i.httpd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = httpd_init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_init
</UL>

<P><STRONG><a name="[65]"></a>main</STRONG> (Thumb, 920 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = main &rArr; gmac_tapdev_init &rArr; GMACB_AutoNegotiate &rArr; GMACB_DumpRegisters &rArr; GMACB_ReadPhy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_timer
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_arpin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tapdev_setmac
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tapdev_send
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tapdev_read
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmac_tapdev_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Disable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTick_Configure
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWI_ConfigureMaster
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWID_Read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWID_Initialize
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_EnablePeripheral
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetDebounceFilter
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_InitializeInterrupts
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_EnableIt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_ConfigureIt
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configure
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c9]"></a>modData</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, httpd-fs.o(i.modData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = modData &rArr; LED_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SW0
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[107]"></a>psock_datalen</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, psock.o(i.psock_datalen))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readto
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[f4]"></a>psock_generator_send</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, psock.o(i.psock_generator_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = psock_generator_send &rArr; send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_acked
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_stats
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_stats
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_stats
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_file
</UL>

<P><STRONG><a name="[fb]"></a>psock_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psock.o(i.psock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = psock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_website
</UL>

<P><STRONG><a name="[123]"></a>psock_newdata</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, psock.o(i.psock_newdata))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readto
</UL>

<P><STRONG><a name="[105]"></a>psock_readto</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, psock.o(i.psock_readto))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = psock_readto &rArr; buf_bufto
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_datalen
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_newdata
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_setup
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_bufto
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[125]"></a>psock_send</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, psock.o(i.psock_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = psock_send &rArr; send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_acked
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_part_of_file
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_headers
</UL>

<P><STRONG><a name="[f8]"></a>readData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, httpd-fs.o(i.readData))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[11d]"></a>timer_expired</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(i.timer_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>timer_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.timer_reset))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>timer_set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, timer.o(i.timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>uip_add32</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, uip.o(i.uip_add32))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
</UL>

<P><STRONG><a name="[11c]"></a>uip_arp_arpin</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, uip_arp.o(i.uip_arp_arpin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_arp_arpin &rArr; uip_arp_update
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_update
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>uip_arp_out</STRONG> (Thumb, 366 bytes, Stack size 8 bytes, uip_arp.o(i.uip_arp_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = uip_arp_out
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>uip_arp_timer</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, uip_arp.o(i.uip_arp_timer))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>uip_init</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, uip.o(i.uip_init))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>uip_ipchksum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uip.o(i.uip_ipchksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uip_ipchksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[113]"></a>uip_listen</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, uip.o(i.uip_listen))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[12d]"></a>uip_log</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.uip_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = uip_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[11a]"></a>uip_process</STRONG> (Thumb, 4002 bytes, Stack size 16 bytes, uip.o(i.uip_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = uip_process &rArr; uip_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_appcall
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>uip_send</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uip.o(i.uip_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[12e]"></a>uip_tcpchksum</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uip.o(i.uip_tcpchksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_tcpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[116]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, main.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>_app_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i._app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _app_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>HardFault_reason</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, exceptions.o(i.HardFault_reason))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[8a]"></a>StackUnwind</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exceptions.o(i.StackUnwind))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[d8]"></a>PIO_SetInput</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, pio.o(i.PIO_SetInput))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[d9]"></a>PIO_SetOutput</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pio.o(i.PIO_SetOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIO_SetOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[d4]"></a>PIO_SetPeripheralA</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, pio.o(i.PIO_SetPeripheralA))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIO_SetPeripheralA
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[d5]"></a>PIO_SetPeripheralB</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, pio.o(i.PIO_SetPeripheralB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIO_SetPeripheralB
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[d6]"></a>PIO_SetPeripheralC</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, pio.o(i.PIO_SetPeripheralC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIO_SetPeripheralC
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[d7]"></a>PIO_SetPeripheralD</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, pio.o(i.PIO_SetPeripheralD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIO_SetPeripheralD
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[dd]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pio_it.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_InitializeInterrupts
</UL>

<P><STRONG><a name="[dc]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pio_it.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_InitializeInterrupts
</UL>

<P><STRONG><a name="[df]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pio_it.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_InitializeInterrupts
</UL>

<P><STRONG><a name="[de]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pio_it.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_InitializeInterrupts
</UL>

<P><STRONG><a name="[b4]"></a>GMACD_ResetRx</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, gmacd.o(i.GMACD_ResetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GMACD_ResetRx &rArr; GMAC_SetRxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_SetRxQueue
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_ReceiveEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_InitTransfer
</UL>

<P><STRONG><a name="[b5]"></a>GMACD_ResetTx</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, gmacd.o(i.GMACD_ResetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GMACD_ResetTx &rArr; GMAC_SetTxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_TransmitEnable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_SetTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_TxErrorHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_InitTransfer
</UL>

<P><STRONG><a name="[aa]"></a>GMACD_TxCompleteHandler</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, gmacd.o(i.GMACD_TxCompleteHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GMACD_TxCompleteHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_GetTxStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_ClearTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Handler
</UL>

<P><STRONG><a name="[a5]"></a>GMACD_TxErrorHandler</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, gmacd.o(i.GMACD_TxErrorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GMACD_TxErrorHandler &rArr; GMACD_ResetTx &rArr; GMAC_SetTxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_ResetTx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_TransmitEnable
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_TransmissionHalt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_GetTxStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_ClearTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Handler
</UL>

<P><STRONG><a name="[c2]"></a>SCB_CleanDCache_by_Addr</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, gmacd.o(i.SCB_CleanDCache_by_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCB_CleanDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_SendSG
</UL>

<P><STRONG><a name="[bb]"></a>SCB_InvalidateDCache_by_Addr</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, gmacd.o(i.SCB_InvalidateDCache_by_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCB_InvalidateDCache_by_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_Poll
</UL>

<P><STRONG><a name="[c1]"></a>fixed_mod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gmacd.o(i.fixed_mod))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_TxCompleteHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACD_SendSG
</UL>

<P><STRONG><a name="[97]"></a>GMACB_FindValidPhy</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, gmacb_phy.o(i.GMACB_FindValidPhy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GMACB_FindValidPhy &rArr; GMACB_ReadPhy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_EnableMdio
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_DisableMdio
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_ReadPhy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_InitPhy
</UL>

<P><STRONG><a name="[92]"></a>GMACB_ReadPhy</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, gmacb_phy.o(i.GMACB_ReadPhy))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GMACB_ReadPhy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_PHYMaintain
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_PHYData
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_WaitPhy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_ResetPhy
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_DumpRegisters
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_AutoNegotiate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_FindValidPhy
</UL>

<P><STRONG><a name="[9f]"></a>GMACB_WaitPhy</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gmacb_phy.o(i.GMACB_WaitPhy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GMACB_WaitPhy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_IsIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_WritePhy
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_ReadPhy
</UL>

<P><STRONG><a name="[93]"></a>GMACB_WritePhy</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, gmacb_phy.o(i.GMACB_WritePhy))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GMACB_WritePhy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMAC_PHYMaintain
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_WaitPhy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_ResetPhy
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GMACB_AutoNegotiate
</UL>

<P><STRONG><a name="[50]"></a>generate_part_of_file</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, httpd.o(i.generate_part_of_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = generate_part_of_file
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.send_file)
</UL>
<P><STRONG><a name="[fc]"></a>handle_connection</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, httpd.o(i.handle_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = handle_connection &rArr; handle_output &rArr; handle_script &rArr; send_part_of_file &rArr; psock_send &rArr; send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_output
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_website
</UL>

<P><STRONG><a name="[103]"></a>handle_input</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, httpd.o(i.handle_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = handle_input &rArr; psock_readto &rArr; buf_bufto
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readto
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_datalen
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_connection
</UL>

<P><STRONG><a name="[104]"></a>handle_output</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, httpd.o(i.handle_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = handle_output &rArr; handle_script &rArr; send_part_of_file &rArr; psock_send &rArr; send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_fs_open
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_headers
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_file
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_script
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_connection
</UL>

<P><STRONG><a name="[10c]"></a>handle_script</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, httpd.o(i.handle_script))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = handle_script &rArr; send_part_of_file &rArr; psock_send &rArr; send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_fs_open
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_cgi
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_part_of_file
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_file
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_scriptstate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_output
</UL>

<P><STRONG><a name="[10e]"></a>next_scriptstate</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, httpd.o(i.next_scriptstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = next_scriptstate
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_script
</UL>

<P><STRONG><a name="[10b]"></a>send_file</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, httpd.o(i.send_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = send_file &rArr; psock_generator_send &rArr; send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_generator_send
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_script
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_output
</UL>

<P><STRONG><a name="[10a]"></a>send_headers</STRONG> (Thumb, 442 bytes, Stack size 24 bytes, httpd.o(i.send_headers))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = send_headers &rArr; psock_send &rArr; send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_send
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_output
</UL>

<P><STRONG><a name="[10f]"></a>send_part_of_file</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, httpd.o(i.send_part_of_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = send_part_of_file &rArr; psock_send &rArr; send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_send
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_script
</UL>

<P><STRONG><a name="[52]"></a>file_stats</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, httpd-cgi.o(i.file_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = file_stats &rArr; psock_generator_send &rArr; send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_generator_send
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd-cgi.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>generate_file_stats</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, httpd-cgi.o(i.generate_file_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = generate_file_stats &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_fs_count
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd-cgi.o(i.file_stats)
</UL>
<P><STRONG><a name="[4f]"></a>generate_net_stats</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, httpd-cgi.o(i.generate_net_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = generate_net_stats &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd-cgi.o(i.net_stats)
</UL>
<P><STRONG><a name="[51]"></a>generate_tcp_stats</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, httpd-cgi.o(i.generate_tcp_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = generate_tcp_stats &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd-cgi.o(i.tcp_stats)
</UL>
<P><STRONG><a name="[54]"></a>net_stats</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, httpd-cgi.o(i.net_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_stats &rArr; psock_generator_send &rArr; send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_generator_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd-cgi.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>nullfunction</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, httpd-cgi.o(i.nullfunction))
<BR>[Address Reference Count : 1]<UL><LI> httpd-cgi.o(i.httpd_cgi)
</UL>
<P><STRONG><a name="[53]"></a>tcp_stats</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, httpd-cgi.o(i.tcp_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcp_stats &rArr; psock_generator_send &rArr; send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_generator_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd-cgi.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>httpd_fs_strcmp</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, httpd-fs.o(i.httpd_fs_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = httpd_fs_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_fs_count
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_fs_open
</UL>

<P><STRONG><a name="[124]"></a>buf_bufto</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, psock.o(i.buf_bufto))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = buf_bufto
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readto
</UL>

<P><STRONG><a name="[122]"></a>buf_setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, psock.o(i.buf_setup))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readto
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_init
</UL>

<P><STRONG><a name="[120]"></a>data_acked</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, psock.o(i.data_acked))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_send
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_generator_send
</UL>

<P><STRONG><a name="[121]"></a>send_data</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, psock.o(i.send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_data &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_send
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_generator_send
</UL>

<P><STRONG><a name="[12c]"></a>chksum</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, uip.o(i.chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
</UL>

<P><STRONG><a name="[128]"></a>uip_add_rcv_nxt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uip.o(i.uip_add_rcv_nxt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_add_rcv_nxt
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[12f]"></a>upper_layer_chksum</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uip.o(i.upper_layer_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
</UL>

<P><STRONG><a name="[12a]"></a>uip_arp_update</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, uip_arp.o(i.uip_arp_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_arp_update
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_arpin
</UL>

<P><STRONG><a name="[4a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
